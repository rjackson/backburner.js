{"version":3,"file":"tests.js","sources":["../tests/autorun-test.ts","../tests/bb-has-timers-test.ts","../tests/cancel-test.ts","../tests/configurable-timeout-test.ts","../tests/debounce-test.ts","../tests/debug-test.ts","../tests/defer-iterable-test.ts","../tests/defer-once-test.ts","../tests/defer-test.ts","../tests/events-test.ts","../tests/join-test.ts","../tests/multi-turn-test.ts","../tests/queue-push-unique-test.ts","../tests/queue-test.ts","../tests/run-test.ts","../tests/set-timeout-test.ts","../tests/throttle-test.ts"],"sourcesContent":["import Backburner from 'backburner';\n\nQUnit.module('tests/autorun');\n\nQUnit.test('autorun', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n\n  assert.ok(!bb.currentInstance, 'The DeferredActionQueues object is lazily instaniated');\n  assert.equal(step++, 0);\n\n  bb.schedule('zomg', null, () => {\n    assert.equal(step, 2);\n    setTimeout(() => {\n      assert.ok(!bb.hasTimers(), 'The all timers are cleared');\n      done();\n    });\n  });\n\n  assert.ok(bb.currentInstance, 'The DeferredActionQueues object exists');\n  assert.equal(step++, 1);\n});\n\nQUnit.test('autorun (joins next run if not yet flushed)', function(assert) {\n  let bb = new Backburner(['zomg']);\n  let order = -1;\n\n  let tasks = {\n    one: { count: 0, order: -1 },\n    two: { count: 0, order: -1 }\n  };\n\n  bb.schedule('zomg', null, () => {\n    tasks.one.count++;\n    tasks.one.order = ++order;\n  });\n\n  assert.deepEqual(tasks, {\n    one: { count: 0, order: -1 },\n    two: { count: 0, order: -1 }\n  });\n\n  bb.run(() => {\n    bb.schedule('zomg', null, () => {\n      tasks.two.count++;\n      tasks.two.order = ++order;\n    });\n\n    assert.deepEqual(tasks, {\n      one: { count: 0, order: -1 },\n      two: { count: 0, order: -1 }\n    });\n  });\n\n  assert.deepEqual(tasks, {\n    one: { count: 1, order: 0 },\n    two: { count: 1, order: 1 }\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/bb-has-timers');\n\nQUnit.test('hasTimers', function (assert) {\n  let done = assert.async();\n  let bb = new Backburner(['ohai']);\n  let timer;\n  let target = {\n    fn() { }\n  };\n\n  bb.schedule('ohai', null, () => {\n    assert.ok(!bb.hasTimers(), 'Initially there are no timers');\n\n    timer = bb.later('ohai', () => {});\n    assert.ok(bb.hasTimers(), 'hasTimers checks timers');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    timer = bb.debounce(target, 'fn', 200);\n    assert.ok(bb.hasTimers(), 'hasTimers checks debouncees');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    timer = bb.throttle(target, 'fn', 200);\n    assert.ok(bb.hasTimers(), 'hasTimers checks throttlers');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    done();\n  });\n});\n","\nimport Backburner from 'backburner';\n\nQUnit.module('tests/cancel');\n\nQUnit.test('null', function(assert) {\n  // mimic browser behavior: window.clearTimeout(null) -> undefined\n  assert.expect(3);\n  let bb = new Backburner(['cancel']);\n  assert.equal(bb.cancel(), undefined, 'cancel with no arguments should return undefined');\n  assert.equal(bb.cancel(null), undefined, 'cancel a null timer should return undefined');\n  assert.equal(bb.cancel(undefined), undefined, 'cancel an undefined timer should return undefined');\n});\n\nQUnit.test('scheduleOnce', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('one', () => functionWasCalled = true);\n\n    assert.ok(timer, 'Timer object was returned');\n    assert.ok(bb.cancel(timer), 'Cancel returned true');\n    assert.ok(!functionWasCalled, 'function was not called');\n  });\n});\n\nQUnit.test('setTimeout', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n\n  let functionWasCalled = false;\n  let timer = bb.later(() => functionWasCalled = true);\n\n  assert.ok(timer, 'Timer object was returned');\n  assert.ok(bb.cancel(timer), 'Cancel returned true');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!functionWasCalled, 'function was not called');\n    assert.ok(!called, 'onBegin was not called');\n    done();\n  }, 0);\n});\n\nQUnit.test('setTimeout with multiple pending', function(assert) {\n  assert.expect(7);\n\n  let done = assert.async();\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n  let function1WasCalled = false;\n  let function2WasCalled = false;\n\n  let timer1 = bb.later(() => function1WasCalled = true);\n  let timer2 = bb.later(() => function2WasCalled = true);\n\n  assert.ok(timer1, 'Timer object 2 was returned');\n  assert.ok(bb.cancel(timer1), 'Cancel for timer 1 returned true');\n  assert.ok(timer2, 'Timer object 2 was returned');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!function1WasCalled, 'function 1 was not called');\n    assert.ok(function2WasCalled, 'function 2 was called');\n    assert.ok(called, 'onBegin was called');\n\n    done();\n  }, 10);\n});\n\nQUnit.test('setTimeout and creating a new later', function(assert) {\n  assert.expect(7);\n  let done = assert.async();\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n  let function1WasCalled = false;\n  let function2WasCalled = false;\n\n  let timer1 = bb.later(() => function1WasCalled = true, 0);\n\n  assert.ok(timer1, 'Timer object 2 was returned');\n  assert.ok(bb.cancel(timer1), 'Cancel for timer 1 returned true');\n\n  let timer2 = bb.later(() => function2WasCalled = true, 1);\n\n  assert.ok(timer2, 'Timer object 2 was returned');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!function1WasCalled, 'function 1 was not called');\n    assert.ok(function2WasCalled, 'function 2 was called');\n    assert.ok(called, 'onBegin was called');\n    done();\n  }, 50);\n});\n\nQUnit.test('cancelTimers', function(assert) {\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  let timer = bb.later(() => functionWasCalled = true);\n\n  assert.ok(timer, 'Timer object was returned');\n  assert.ok(bb.hasTimers(), 'bb has scheduled timer');\n\n  bb.cancelTimers();\n\n  assert.ok(!bb.hasTimers(), 'bb has no scheduled timer');\n  assert.ok(!functionWasCalled, 'function was not called');\n});\n\nQUnit.test('cancel during flush', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    let timer1 = bb.scheduleOnce('one', () => bb.cancel(timer2));\n    let timer2 = bb.scheduleOnce('one', () => functionWasCalled = true);\n  });\n\n  assert.ok(!functionWasCalled, 'function was not called');\n});\n\nQUnit.test('with GUID_KEY and target', function(assert) {\n  assert.expect(3);\n\n  let obj = {\n    ___FOO___: 1\n  };\n\n  let bb = new Backburner(['action'], {\n    GUID_KEY: '___FOO___'\n  });\n\n  let wasCalled = 0;\n\n  function fn() {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('with GUID_KEY and a target without meta', function(assert) {\n  assert.expect(3);\n\n  let obj = { };\n\n  let bb = new Backburner(['action'], {\n    GUID_KEY: '___FOO___'\n  });\n\n  let wasCalled = 0;\n\n  function fn () {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('with GUID_KEY no target', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['action'], {\n    GUID_KEY: '___FOO___'\n  });\n\n  let wasCalled = 0;\n\n  function fn () {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('with peekGuid and target', function(assert) {\n  assert.expect(3);\n\n  let obj = {};\n\n  let bb = new Backburner(['action'], {\n    peekGuid(obj2) {\n      if (obj === obj2) { return 1; }\n    }\n  });\n\n  let wasCalled = 0;\n\n  function fn() {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('with peekGuid and a target without guid', function(assert) {\n  assert.expect(3);\n\n  let obj = { };\n\n  let bb = new Backburner(['action'], {\n    peekGuid() { }\n  });\n\n  let wasCalled = 0;\n\n  function fn () {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('with peekGuid no target', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['action'], {\n    peekGuid() { }\n  });\n\n  let wasCalled = 0;\n\n  function fn () {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/configurable-timeout');\n\nQUnit.test('We can configure a custom platform', function(assert) {\n  assert.expect(1);\n\n  let fakePlatform = {\n    setTimeout() {},\n    clearTimeout() {},\n    isFakePlatform: true\n  };\n\n  let bb = new Backburner(['one'], {\n    _platform: fakePlatform\n  });\n\n  assert.ok(bb.options._platform.isFakePlatform, 'We can pass in a custom platform');\n});\n\nQUnit.test('We can use a custom later', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  let customTimeoutWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _platform: {\n      setTimeout(method, wait) {\n        customTimeoutWasUsed = true;\n        return setTimeout(method, wait);\n      },\n      clearTimeout(timer) {\n        return clearTimeout(timer);\n      },\n      isFakePlatform: true\n    }\n  });\n\n  bb.scheduleOnce('one', () => {\n    assert.ok(bb.options._platform.isFakePlatform, 'we are using the fake platform');\n    assert.ok(customTimeoutWasUsed , 'custom later was used');\n    done();\n  });\n});\n\nQUnit.test('We can use a custom clearTimeout', function(assert) {\n  assert.expect(2);\n\n  let functionWasCalled = false;\n  let customClearTimeoutWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _platform: {\n      setTimeout(method, wait) {\n        return setTimeout(method, wait);\n      },\n      clearTimeout(timer) {\n        customClearTimeoutWasUsed = true;\n        return clearTimeout(timer);\n      },\n      next(method) {\n        return setTimeout(method, 0);\n      },\n      clearNext(timer) {\n        customClearTimeoutWasUsed = true;\n        return clearTimeout(timer);\n      }\n    }\n  });\n\n  bb.scheduleOnce('one', () => functionWasCalled = true);\n  bb.cancelTimers();\n\n  bb.run(() => {\n    bb.scheduleOnce('one', () => {\n      assert.ok(!functionWasCalled, 'function was not called');\n      assert.ok(customClearTimeoutWasUsed, 'custom clearTimeout was used');\n    });\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/debounce');\n\nQUnit.test('debounce', function(assert) {\n  assert.expect(14);\n\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let done = assert.async();\n\n  let wasCalled = false;\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's debounce the function `debouncee` for 40ms\n  // it will be executed 40ms after\n  bb.debounce(null, debouncee, 40);\n  assert.equal(step++, 0);\n\n  // let's schedule `debouncee` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40);\n  }, 10);\n\n  // let's schedule `debouncee` to run again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40);\n  }, 30);\n\n  // let's schedule `debouncee` to run yet again in 60ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40);\n  }, 60);\n\n  // now, let's schedule an assertion to occur at 110ms,\n  // 10ms after `debouncee` has been called the last time\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(wasCalled);\n  }, 110);\n\n  // great, we've made it this far, there's one more thing\n  // we need to QUnit.test. we want to make sure we can call `debounce`\n  // again with the same target/method after it has executed\n\n  // at the 120ms mark, let's schedule another call to `debounce`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call debounce for the second time\n    bb.debounce(null, debouncee, 100);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(wasCalled, 'Another debounce call with the same function can be executed later');\n      done();\n    }, 230);\n  }, 120);\n});\n\nQUnit.test('debounce - immediate', function(assert) {\n  assert.expect(16);\n\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n\n  let wasCalled = false;\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's debounce the function `debouncee` for 40ms\n  // it will be executed immediately, and prevent\n  // any actions for 40ms after\n  bb.debounce(null, debouncee, 40, true);\n  assert.equal(step++, 0);\n  assert.ok(wasCalled);\n  wasCalled = false;\n\n  // let's schedule `debouncee` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 10);\n\n  // let's schedule `debouncee` to run again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 30);\n\n  // let's schedule `debouncee` to run yet again in 60ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 60);\n\n  // now, let's schedule an assertion to occur at 110ms,\n  // 10ms after `debouncee` has been called the last time\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(!wasCalled);\n  }, 110);\n\n  // great, we've made it this far, there's one more thing\n  // we need to QUnit.test. we want to make sure we can call `debounce`\n  // again with the same target/method after it has executed\n\n  // at the 120ms mark, let's schedule another call to `debounce`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call debounce for the second time\n    bb.debounce(null, debouncee, 100, true);\n    assert.ok(wasCalled, 'Another debounce call with the same function can be executed later');\n    wasCalled = false;\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(!wasCalled);\n      done();\n    }, 230);\n  }, 120);\n});\n\nQUnit.test('debounce accept time interval like string numbers', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  bb.debounce(null, debouncee, '40');\n  assert.equal(step++, 0);\n\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, '40');\n  }, 10);\n\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(wasCalled);\n    done();\n  }, 60);\n});\n\nQUnit.test('debounce returns timer information usable for cancelling', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(false, 'this method shouldn\\'t be called');\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  assert.ok(bb.cancel(timer), 'the timer is cancelled');\n\n  // should return false second time around\n  assert.ok(!bb.cancel(timer), 'the timer no longer exists in the list');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'the timer wasn\\'t called after waiting');\n    done();\n  }, 60);\n});\n\nQUnit.test('debounce cancelled after it\\'s executed returns false', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['darkknight']);\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(true, 'the debounced method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  setTimeout(() => {\n    assert.ok(!bb.cancel(timer), 'no timer existed to cancel');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n\n});\n\nQUnit.test('debounce cancelled doesn\\'t cancel older items', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['robin']);\n  let wasCalled = false;\n  let done = assert.async();\n\n  function debouncee() {\n    assert.ok(true, 'the debounced method was called');\n    if (wasCalled) {\n      done();\n    }\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  setTimeout(() => {\n    bb.debounce(null, debouncee, 1);\n    assert.ok(!bb.cancel(timer), 'the second timer isn\\'t removed, despite appearing to be the same');\n    assert.ok(wasCalled, 'the timer was actually called');\n  }, 10);\n});\n\nQUnit.test('debounce that is immediate, and cancelled and called again happens immediately', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['robin']);\n  let calledCount = 0;\n\n  function debouncee() {\n    calledCount++;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1000, true);\n\n  setTimeout(() => { // 10 millisecond delay\n    assert.equal(1, calledCount, 'debounced method was called');\n    assert.ok(bb.cancel(timer), 'debounced delay was cancelled');\n    bb.debounce(null, debouncee, 1000, true);\n\n    setTimeout(() => { // 10 millisecond delay\n      assert.equal(2, calledCount, 'debounced method was called again immediately');\n      done();\n    }, 10);\n  }, 10);\n\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  let done = assert.async();\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n    done();\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError\n  });\n\n  bb.debounce(null, () => { throw new Error('QUnit.test error'); }, 20);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/debug');\n\nQUnit.test('DEBUG flag enables stack tagging', function(assert) {\n  let bb = new Backburner(['one']);\n\n  bb.schedule('one', () => {});\n\n  assert.ok(bb.currentInstance && !bb.currentInstance.queues.one._queue[3], 'No stack is recorded');\n\n  bb.DEBUG = true;\n\n  bb.schedule('one', () => {});\n\n  if (new Error().stack) { // workaround for CLI runner :(\n    assert.expect(4);\n    let stack = bb.currentInstance && bb.currentInstance.queues.one._queue[7].stack;\n    assert.ok(typeof stack === 'string', 'A stack is recorded');\n\n    let onError = function(error, errorRecordedForStack){\n      assert.ok(errorRecordedForStack, 'errorRecordedForStack passed to error function');\n      assert.ok(errorRecordedForStack.stack, 'stack is recorded');\n    };\n\n    bb = new Backburner(['errors'], {onError: onError});\n    bb.DEBUG = true;\n\n    bb.run(() => {\n      bb.schedule('errors', () => {\n        throw new Error('message!');\n      });\n    });\n  }\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/defer-iterable');\n\nclass Iterator {\n  private _collection: Function[];\n  private _iteration: number = 0;\n  constructor(collection: Function[] = []) {\n    this._collection = collection;\n  }\n\n  public next() {\n    let iteration = this._iteration++;\n    let collection = this._collection;\n    let done = collection.length <= iteration;\n\n    let value = done ? undefined : collection[iteration];\n\n    return {\n      done,\n      value\n    };\n  }\n}\n\nQUnit.test('deferIterable', function(assert) {\n  let bb = new Backburner(['zomg']);\n  let order = 0;\n\n  let tasks = {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  };\n\n  function task1() {\n    tasks.one.count++;\n    tasks.one.order = order++;\n  }\n\n  function task2() {\n    tasks.two.count++;\n    tasks.two.order = order++;\n  }\n\n  function task3() {\n    tasks.three.count++;\n    tasks.three.order = order++;\n  }\n\n  let iterator = () => new Iterator([task1, task2, task3]);\n\n  bb.run(() => {\n    bb.scheduleIterable('zomg', iterator);\n\n    assert.deepEqual(tasks, {\n      one:   { count: 0,  order: -1 },\n      two:   { count: 0,  order: -1 },\n      three: { count: 0,  order: -1 }\n    });\n  });\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1,  order: 0 },\n    two:   { count: 1,  order: 1 },\n    three: { count: 1,  order: 2 }\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/defer-once');\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', () => {\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {zomg: 'hi'}, function() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method name', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n  let targetObject = {\n    zomg: 'hi',\n    checkFunction() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    }\n  };\n\n  bb.run(() => bb.scheduleOnce('one', targetObject, 'checkFunction'));\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('throws when passed a null method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.scheduleOnce('deferErrors', {zomg: 'hi'}, null));\n});\n\nQUnit.test('throws when passed an undefined method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.deferOnce('deferErrors', {zomg: 'hi'}, undefined));\n});\n\nQUnit.test('throws when passed an method name that does not exists on the target', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.deferOnce('deferErrors', {zomg: 'hi'}, 'checkFunction'));\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {zomg: 'hi'}, function(a, b, c) {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      assert.equal(a, 1, 'the first arguments was passed in');\n      assert.equal(b, 2, 'the second arguments was passed in');\n      assert.equal(c, 3, 'the third arguments was passed in');\n      functionWasCalled = true;\n    }, 1, 2, 3);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed same function twice', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let functionWasCalled = false;\n\n  function deferMethod() {\n    i++;\n    assert.equal(i, 1, 'Function should be called only once');\n    functionWasCalled = true;\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', deferMethod);\n    bb.scheduleOnce('one', deferMethod);\n  });\n\n  assert.ok(functionWasCalled, 'function was called only once');\n});\n\nQUnit.test('when passed same function twice with same target', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let functionWasCalled = false;\n\n  function deferMethod() {\n    i++;\n    assert.equal(i, 1, 'Function should be called only once');\n    assert.equal(this['first'], 1, 'the target property was set');\n    functionWasCalled = true;\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod);\n    bb.scheduleOnce('one', argObj, deferMethod);\n  });\n\n  assert.ok(functionWasCalled, 'function was called only once');\n});\n\nQUnit.test('when passed same function twice with different targets', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod() {\n    i++;\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {first: 1}, deferMethod);\n    bb.scheduleOnce('one', {first: 1}, deferMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with same arguments and same target', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 1, 'First argument is set only one time');\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n  });\n\n  assert.equal(i, 1, 'function was called once');\n});\n\nQUnit.test('when passed same function twice with same target and different arguments', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 3, 'First argument of only second call is set');\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n    bb.scheduleOnce('one', argObj, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 1, 'function was called once');\n});\n\nQUnit.test('when passed same function twice with different target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {first: 1}, deferMethod, 1, 2);\n    bb.scheduleOnce('one', {first: 1}, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function with same target after already triggering in current loop (GUID_KEY)', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one', 'two'], { GUID_KEY: 'GUID_KEY' });\n  let i = 0;\n\n  function deferMethod(a) {\n    i++;\n    assert.equal(a, i, 'Correct argument is set');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  function scheduleMethod() {\n    bb.scheduleOnce('one', argObj, deferMethod, 2);\n  }\n\n  let argObj = {first: 1, GUID_KEY: '1'};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1);\n    bb.scheduleOnce('two', argObj, scheduleMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function with same target after already triggering in current loop (peekGuid)', function(assert) {\n  assert.expect(5);\n\n  let argObj = {first: 1};\n  let bb = new Backburner(['one', 'two'], {\n    peekGuid(obj) {\n      if (argObj === obj) { return '1'; }\n    }\n  });\n\n  let i = 0;\n\n  function deferMethod(a) {\n    i++;\n    assert.equal(a, i, 'Correct argument is set');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  function scheduleMethod() {\n    bb.scheduleOnce('one', argObj, deferMethod, 2);\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1);\n    bb.scheduleOnce('two', argObj, scheduleMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], { onError });\n\n  bb.run(() => {\n    bb.scheduleOnce('errors', () => {\n      throw new Error('QUnit.test error');\n    });\n  });\n});\n","import Backburner from 'backburner';\nlet originalDateValueOf = Date.prototype.valueOf;\n\nQUnit.module('tests/defer', {\n  afterEach() {\n    Date.prototype.valueOf = originalDateValueOf;\n  }\n});\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', () => functionWasCalled = true);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', { zomg: 'hi' }, function() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method name', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n  let targetObject = {\n    zomg: 'hi',\n    checkFunction() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    }\n  };\n\n  bb.run(() => bb.schedule('one', targetObject, 'checkFunction'));\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('throws when passed a null method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, null));\n});\n\nQUnit.test('throws when passed an undefined method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, undefined));\n});\n\nQUnit.test('throws when passed an method name that does not exists on the target', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, 'checkFunction'));\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', { zomg: 'hi' }, function(a, b, c) {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      assert.equal(a, 1, 'the first arguments was passed in');\n      assert.equal(b, 2, 'the second arguments was passed in');\n      assert.equal(c, 3, 'the third arguments was passed in');\n      functionWasCalled = true;\n    }, 1, 2, 3);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed same function twice', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod() {\n    i++;\n  }\n\n  bb.run(() => {\n    bb.schedule('one', deferMethod);\n    bb.schedule('one', deferMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with arguments', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let argObj = {first : 1};\n\n  function deferMethod() {\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod);\n    bb.schedule('one', argObj, deferMethod);\n  });\n});\n\nQUnit.test('when passed same function twice with same arguments and same target', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 1, 'First argument is set twice');\n    assert.equal(b, 2, 'Second argument is set twice');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = { first: 1 };\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with same target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = { first: 1 };\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n    bb.schedule('one', argObj, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with different target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.schedule('one', { first: 1 }, deferMethod, 1, 2);\n    bb.schedule('one', { first: 1 }, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError\n  });\n\n  bb.run(() => {\n    bb.schedule('errors', () => {\n      throw new Error('QUnit.test error');\n    });\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/events');\n\nQUnit.test('end event should fire after runloop completes', function(assert) {\n  assert.expect(3);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two']);\n\n  bb.on('end', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 0);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 0);\n  }\n\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n\n  assert.equal(callNumber, 1);\n});\n\nQUnit.test('end event should fire before onEnd', function(assert) {\n  assert.expect(3);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two'], {\n    onEnd() {\n      assert.equal(callNumber, 1);\n    }\n  });\n\n  bb.on('end', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 0);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 0);\n  }\n\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n});\n\nQUnit.test('end event should be passed the current and next instance', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let firstArgument = null;\n  let secondArgument = null;\n\n  let bb = new Backburner(['one'], {\n    onEnd(first, second) {\n      assert.equal(firstArgument, first);\n      assert.equal(secondArgument, second);\n    }\n  });\n\n  bb.on('end', (first, second) => {\n    firstArgument = first;\n    secondArgument = second;\n  });\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n  bb.run(() => bb.schedule('one', null, () => {}));\n});\n// blah\n\nQUnit.test('begin event should fire before runloop begins', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two']);\n\n  bb.on('begin', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 1);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 1);\n  }\n\n  assert.equal(callNumber, 0);\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n\n  assert.equal(callNumber, 1);\n});\n\nQUnit.test('begin event should fire before onBegin', function(assert) {\n  assert.expect(1);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two'], {\n    onBegin() {\n      assert.equal(callNumber, 1);\n    }\n  });\n\n  bb.on('begin', () => callNumber++);\n\n  bb.run(() => {\n    bb.schedule('one', null, () => {});\n    bb.schedule('two', null, () => {});\n  });\n});\n\nQUnit.test('begin event should be passed the current and previous instance', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let firstArgument = null;\n  let secondArgument = null;\n\n  let bb = new Backburner(['one'], {\n    onBegin(first, second) {\n      assert.equal(firstArgument, first);\n      assert.equal(secondArgument, second);\n    }\n  });\n\n  bb.on('begin', (first, second) => {\n    firstArgument = first;\n    secondArgument = second;\n  });\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n  bb.run(() => bb.schedule('one', null, () => {}));\n});\n\n// blah\nQUnit.test('events should work with multiple callbacks', function(assert) {\n  assert.expect(2);\n  let firstCalled = false;\n  let secondCalled = false;\n\n  let bb = new Backburner(['one']);\n\n  function first() {\n    firstCalled = true;\n  }\n\n  function second() {\n    secondCalled = true;\n  }\n\n  bb.on('end', first);\n  bb.on('end', second);\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n\n  assert.equal(secondCalled, true);\n  assert.equal(firstCalled, true);\n});\n\nQUnit.test('off should unregister specific callback', function(assert) {\n  assert.expect(2);\n  let firstCalled = false;\n  let secondCalled = false;\n\n  let bb = new Backburner(['one']);\n\n  function first() {\n    firstCalled = true;\n  }\n\n  function second() {\n    secondCalled = true;\n  }\n\n  bb.on('end', first);\n  bb.on('end', second);\n\n  bb.off('end', first);\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n\n  assert.equal(secondCalled, true);\n  assert.equal(firstCalled, false);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/join');\n\nfunction depth(bb) {\n  return bb.instanceStack.length + (bb.currentInstance ? 1 : 0);\n}\n\nQUnit.test('outside of a run loop', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  let result = bb.join(function() {\n    assert.equal(depth(bb), 1);\n    return 'result';\n  });\n  assert.equal(result, 'result');\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('inside of a run loop', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.run(function() {\n    let result = bb.join(function() {\n      assert.equal(depth(bb), 1);\n      return 'result';\n    });\n    assert.equal(result, 'result');\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('nested join calls', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.join(function() {\n    assert.equal(depth(bb), 1);\n    bb.join(function() {\n      assert.equal(depth(bb), 1);\n      bb.join(function() {\n        assert.equal(depth(bb), 1);\n      });\n      assert.equal(depth(bb), 1);\n    });\n    assert.equal(depth(bb), 1);\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('nested run loops', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.join(function() {\n    assert.equal(depth(bb), 1);\n    bb.run(function() {\n      assert.equal(depth(bb), 2);\n      bb.join(function() {\n        assert.equal(depth(bb), 2);\n      });\n      assert.equal(depth(bb), 2);\n    });\n    assert.equal(depth(bb), 1);\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('queue execution order', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let items: number[] = [];\n\n  bb.run(function() {\n    items.push(0);\n    bb.schedule('one', () => items.push(4));\n    bb.join(function() {\n      items.push(1);\n      bb.schedule('one', () => items.push(5));\n      items.push(2);\n    });\n    bb.schedule('one', () => items.push(6));\n    items.push(3);\n  });\n  assert.deepEqual(items, [0, 1, 2, 3, 4, 5, 6]);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/multi-turn');\n\nconst queue: any[] = [];\nconst platform = {\n  flushSync() {\n    let current = queue.slice();\n    queue.length = 0;\n    current.forEach((task) => task());\n  },\n\n  // TDB actually implement\n  next(cb) {\n    queue.push(cb);\n  }\n};\n\nQUnit.test('basic', function(assert) {\n  let bb = new Backburner(['zomg'], {\n\n    // This is just a place holder for now, but somehow the system needs to\n    // know to when to stop\n    mustYield() {\n      return true; // yield after each step, for now.\n    },\n    _platform: platform\n  });\n\n  let order = -1;\n  let tasks = {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  };\n\n  bb.schedule('zomg', null, () => {\n    tasks.one.count++;\n    tasks.one.order = ++order;\n  });\n\n  bb.schedule('zomg', null, () => {\n    tasks.two.count++;\n    tasks.two.order = ++order;\n  });\n\n  bb.schedule('zomg', null, () => {\n    tasks.three.count++;\n    tasks.three.order = ++order;\n  });\n\n  assert.deepEqual(tasks, {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  }, 'no tasks have been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  }, 'TaskOne has been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 1, order:  1 },\n    three: { count: 0, order: -1 }\n  }, 'TaskOne and TaskTwo has been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 1, order:  1 },\n    three: { count: 1, order:  2 }\n  }, 'TaskOne, TaskTwo and TaskThree has been run before the platform flushes');\n});\n","import Backburner from 'backburner';\n\nlet Queue = (<any> Backburner).Queue;\n\nQUnit.module('tests/queue-push-unique');\nlet slice = [].slice;\n\nQUnit.test('pushUnique: 2 different targets', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    foo() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  let target2 = {\n    foo() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 different methods called twice', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 2 different targets (GUID_KEY)', function(assert) {\n  let queue = new Queue('foo', {}, { GUID_KEY: 'GUID_KEY' });\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    GUID_KEY: 'target1',\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  let target2 = {\n    GUID_KEY: 'target2',\n    foo: function() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods (GUID_KEY)', function(assert) {\n  let queue = new Queue('foo', {}, { GUID_KEY: 'GUID_KEY' });\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    GUID_KEY: 'target1',\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 diffe`rent methods called twice (GUID_KEY)', function(assert) {\n  let queue = new Queue('foo', {}, { GUID_KEY: 'GUID_KEY' });\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    GUID_KEY: 'target1',\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods, second one called twice (GUID_KEY)', function(assert) {\n  let queue = new Queue('foo', {}, { GUID_KEY: 'GUID_KEY' });\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    GUID_KEY: 'target1',\n    foo: function() {\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target1, target1.bar, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n});\n\nQUnit.test('pushUnique: 2 different targets (peekGuid)', function(assert) {\n  let guidIndexer = [];\n  let queue = new Queue('foo', {}, {\n    peekGuid(obj) {\n      let guid = guidIndexer.indexOf(obj);\n      if (guid === -1) {\n        return null;\n      }\n\n      return guid;\n    }\n  });\n\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n  guidIndexer.push(target1);\n\n  let target2 = {\n    foo: function() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n  guidIndexer.push(target2);\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods (peekGuid)', function(assert) {\n  let guidIndexer = [];\n  let queue = new Queue('foo', {}, {\n    peekGuid(obj) {\n      let guid = guidIndexer.indexOf(obj);\n      if (guid === -1) {\n        return null;\n      }\n\n      return guid;\n    }\n\n  });\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n  guidIndexer.push(target1);\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 different methods called twice (peekGuid)', function(assert) {\n  let guidIndexer = [];\n  let queue = new Queue('foo', {}, {\n    peekGuid(obj) {\n      let guid = guidIndexer.indexOf(obj);\n      if (guid === -1) {\n        return null;\n      }\n\n      return guid;\n    }\n\n  });\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n  guidIndexer.push(target1);\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods, second one called twice (peekGuid)', function(assert) {\n  let guidIndexer = [];\n  let queue = new Queue('foo', {}, {\n    peekGuid(obj) {\n      let guid = guidIndexer.indexOf(obj);\n      if (guid === -1) {\n        return null;\n      }\n\n      return guid;\n    }\n  });\n\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n  guidIndexer.push(target1);\n\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target1, target1.bar, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/queue');\n\nQUnit.test('actions scheduled on previous queue, start over from beginning', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one', 'two']);\n  let step = 0;\n\n  bb.run(function() {\n    assert.equal(step++, 0, '0');\n\n    bb.schedule('two', null, function() {\n      assert.equal(step++, 1, '1');\n\n      bb.schedule('one', null, function() {\n        assert.equal(step++, 3, '3');\n      });\n    });\n\n    bb.schedule('two', null, function() {\n      assert.equal(step++, 2, '2');\n    });\n  });\n\n  assert.equal(step, 4, '4');\n});\n\nQUnit.test('Queue#flush should be recursive if new items are added', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let count = 0;\n\n  bb.run(function() {\n    function increment() {\n      if (++count < 3) {\n        bb.schedule('one', increment);\n      }\n\n      if (count === 3) {\n\n        bb.schedule('one', increment);\n      }\n    }\n\n    increment();\n    assert.equal(count, 1, 'should not have run yet');\n\n    let currentInstance = bb.currentInstance;\n    if (currentInstance) {\n      currentInstance.queues.one.flush();\n    }\n    assert.equal(count, 4, 'should have run all scheduled methods, even ones added during flush');\n  });\n\n});\n\nQUnit.test('Default queue is automatically set to first queue if none is provided', function(assert) {\n  let bb = new Backburner(['one', 'two']);\n  assert.equal(bb.options.defaultQueue, 'one');\n});\n\nQUnit.test('Default queue can be manually configured', function(assert) {\n  let bb = new Backburner(['one', 'two'], {\n    defaultQueue: 'two'\n  });\n\n  assert.equal(bb.options.defaultQueue, 'two');\n});\n\nQUnit.test('onBegin and onEnd are called and passed the correct parameters', function(assert) {\n  assert.expect(2);\n\n  let befores: Array<any | null | undefined> = [];\n  let afters: Array<any | null | undefined> = [];\n  let expectedBefores: Array<any | null | undefined> = [];\n  let expectedAfters: Array<any | null | undefined> = [];\n  let outer: any;\n  let inner: any;\n\n  let bb = new Backburner(['one'], {\n    onBegin: function(current, previous) {\n      befores.push(current);\n      befores.push(previous);\n    },\n    onEnd: function(current, next) {\n      afters.push(current);\n      afters.push(next);\n    }\n  });\n\n  bb.run(function() {\n    outer = bb.currentInstance;\n    bb.run(function() {\n      inner = bb.currentInstance;\n    });\n  });\n\n  expectedBefores = [outer, null, inner, outer];\n  expectedAfters = [inner, outer, outer, null];\n\n  assert.deepEqual(befores, expectedBefores, 'before callbacks successful');\n  assert.deepEqual(afters, expectedAfters, 'after callback successful');\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/run');\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => functionWasCalled = true);\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run({zomg: 'hi'}, function() {\n    assert.equal(this.zomg, 'hi', 'the target was properly set');\n    functionWasCalled = true;\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run({zomg: 'hi'}, function(a, b, c) {\n    assert.equal(this.zomg, 'hi', 'the target was properly set');\n    assert.equal(a, 1, 'the first arguments was passed in');\n    assert.equal(b, 2, 'the second arguments was passed in');\n    assert.equal(c, 3, 'the third arguments was passed in');\n    functionWasCalled = true;\n  }, 1, 2, 3);\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('nesting run loops preserves the stack', function(assert) {\n  assert.expect(10);\n\n  let bb = new Backburner(['one']);\n  let outerBeforeFunctionWasCalled = false;\n  let middleBeforeFunctionWasCalled = false;\n  let innerFunctionWasCalled = false;\n  let middleAfterFunctionWasCalled = false;\n  let outerAfterFunctionWasCalled = false;\n\n  bb.run(function () {\n    bb.schedule('one', () => {\n      outerBeforeFunctionWasCalled = true;\n    });\n\n    bb.run(function () {\n      bb.schedule('one', () => {\n        middleBeforeFunctionWasCalled = true;\n      });\n\n      bb.run(function () {\n        bb.schedule('one', function () {\n          innerFunctionWasCalled = true;\n        });\n        assert.ok(!innerFunctionWasCalled, 'function is deferred');\n      });\n      assert.ok(innerFunctionWasCalled, 'function is called');\n\n      bb.schedule('one', function () {\n        middleAfterFunctionWasCalled = true;\n      });\n\n      assert.ok(!middleBeforeFunctionWasCalled, 'function is deferred');\n      assert.ok(!middleAfterFunctionWasCalled, 'function is deferred');\n    });\n\n    assert.ok(middleBeforeFunctionWasCalled, 'function is called');\n    assert.ok(middleAfterFunctionWasCalled, 'function is called');\n\n    bb.schedule('one', function () {\n      outerAfterFunctionWasCalled = true;\n    });\n\n    assert.ok(!outerBeforeFunctionWasCalled, 'function is deferred');\n    assert.ok(!outerAfterFunctionWasCalled, 'function is deferred');\n  });\n\n  assert.ok(outerBeforeFunctionWasCalled, 'function is called');\n  assert.ok(outerAfterFunctionWasCalled, 'function is called');\n});\n\nQUnit.test('runs can be nested', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let step = 0;\n\n  bb.run(function() {\n    assert.equal(step++, 0);\n\n    bb.run(function() {\n      assert.equal(step++, 1);\n    });\n  });\n});\n\nQUnit.test('run returns value', function(assert) {\n  let bb = new Backburner(['one']);\n\n  let value = bb.run(function() {\n    return 'hi';\n  });\n\n  assert.equal(value, 'hi');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(function() {\n    throw new Error('QUnit.test error');\n  });\n});\n\nQUnit.test('onError set after start', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['errors']);\n\n  bb.run(() => assert.ok(true));\n\n  bb.options.onError = function(error) {\n    assert.equal('QUnit.test error', error.message);\n  };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n});\n\nQUnit.test('onError with target and action', function(assert) {\n  assert.expect(2);\n\n  let target = {};\n\n  let bb = new Backburner(['errors'], {\n    onErrorTarget: target,\n    onErrorMethod: 'onerror'\n  });\n\n  bb.run(() => assert.ok(true));\n\n  target['onerror'] = function(error) {\n    assert.equal('QUnit.test error', error.message);\n  };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n});\n","import Backburner from 'backburner';\n\nconst originalDateNow = Date.now;\nconst originalDateValueOf = Date.prototype.valueOf;\n\nQUnit.module('tests/set-timeout-test', {\n  afterEach() {\n    Date.now = originalDateNow;\n    Date.prototype.valueOf = originalDateValueOf;\n  }\n});\n\nQUnit.test('later', function(assert) {\n  assert.expect(6);\n\n  let bb = new Backburner(['one']);\n  let step = 0;\n  let instance;\n  let done = assert.async();\n\n  // Force +new Date to return the same result while scheduling\n  // run.later timers. Otherwise: non-determinism!\n  let now = +new Date();\n  Date.prototype.valueOf = function() { return now; };\n\n  bb.later(null, () => {\n    instance = bb.currentInstance;\n    assert.equal(step++, 0);\n  }, 10);\n\n  bb.later(null, () => {\n    assert.equal(step++, 1);\n    assert.equal(instance, bb.currentInstance, 'same instance');\n  }, 10);\n\n  Date.prototype.valueOf = originalDateValueOf;\n  // spin so that when we execute timers (+new Date()) will be greater than the\n  // time scheduled above; not a problem in real life as we will never 'wait'\n  // 0ms\n  while ((+ new Date()) <= now + 10) {};\n\n  bb.later(null, () => {\n    assert.equal(step++, 2);\n\n    bb.later(null, () => {\n      assert.equal(step++, 3);\n      assert.ok(true, 'Another later will execute correctly');\n      done();\n    }, 1);\n  }, 20);\n});\n\nQUnit.test('later can continue when `Date.now` is monkey-patched', function(assert) {\n  assert.expect(1);\n\n  let arbitraryTime = +new Date();\n  let bb = new Backburner(['one']);\n  let done = assert.async();\n\n  Date.now = function() { return arbitraryTime; };\n\n  bb.later(() => {\n    assert.ok(true);\n    done();\n  }, 1);\n});\n\nlet bb;\nQUnit.module('later arguments / arity', {\n  beforeEach() {\n    bb = new Backburner(['one']);\n  },\n  afterEach() {\n    bb = undefined;\n  }\n});\n\nQUnit.test('[callback]', function(assert) {\n  assert.expect(2);\n\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 0);\n    assert.ok(true, 'was called');\n    done();\n  });\n});\n\nQUnit.test('[callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 1);\n    assert.ok(true, 'was called');\n    done();\n  }, undefined);\n});\n\nQUnit.test('[null, callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 0);\n    assert.ok(true, 'was called');\n    done();\n  });\n});\n\nQUnit.test('[null, callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 1);\n    assert.ok(true, 'was called');\n    done();\n  }, undefined);\n});\n\nQUnit.test('[null, callback, null]', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 1);\n    assert.equal(arguments[0], null);\n    assert.ok(true, 'was called');\n    done();\n  }, null);\n});\n\nQUnit.test('[callback, string, string, string]', function(assert) {\n  assert.expect(5);\n\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c');\n});\n\nQUnit.test('[null, callback, string, string, string]', function(assert) {\n  assert.expect(5);\n\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c');\n});\n\nQUnit.test('[null, callback, string, string, string, number]', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c', 10);\n});\n\nQUnit.test('[null, callback, string, string, string, numericString]', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  },  'a', 'b', 'c', '1');\n});\n\nQUnit.test('[obj, string]', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro');\n});\n\nQUnit.test('[obj, string, value]', function(assert) {\n  assert.expect(3);\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value');\n});\n\nQUnit.test('[obj, string, value, number]', function(assert) {\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value', 1);\n});\n\nQUnit.test('[obj, string, value, numericString]', function(assert) {\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value', '1');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  let done = assert.async();\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n    done();\n  }\n\n  bb = new Backburner(['errors'], { onError });\n\n  bb.later(() => { throw new Error('test error'); }, 1);\n});\n\nQUnit.test('later doesn\\'t trigger twice with earlier later', function(assert) {\n  assert.expect(3);\n\n  bb = new Backburner(['one']);\n  let called1 = 0;\n  let called2 = 0;\n  let calls = 0;\n  let oldRun = bb.run;\n  let done = assert.async();\n\n  // Count run() calls and relay them to original function\n  bb.run = function () {\n    calls++;\n    oldRun.apply(bb, arguments);\n  };\n\n  bb.later(() => called1++, 50);\n  bb.later(() => called2++, 10);\n\n  setTimeout(() => {\n    assert.equal(called1, 1, 'timeout 1 was called once');\n    assert.equal(called2, 1, 'timeout 2 was called once');\n    assert.equal(calls, 2, 'run() was called twice');\n    done();\n  }, 100);\n});\n\nQUnit.test('later with two Backburner instances', function(assert) {\n  assert.expect(8);\n\n  let steps = 0;\n  let done = assert.async();\n  let bb1 = new Backburner(['one'], {\n    onBegin() {\n      assert.equal(++steps, 4);\n    }\n  });\n  let bb2 = new Backburner(['one'], {\n    onBegin() {\n      assert.equal(++steps, 6);\n    }\n  });\n\n  assert.equal(++steps, 1);\n\n  bb1.later(() => assert.equal(++steps, 5), 10);\n\n  assert.equal(++steps, 2);\n\n  bb2.later(() => assert.equal(++steps, 7), 10);\n\n  assert.equal(++steps, 3);\n\n  setTimeout(() => {\n    assert.equal(++steps, 8);\n    done();\n  }, 50);\n});\n\nQUnit.test('expired timeout doesn\\'t hang when setting a new timeout', function(assert) {\n  assert.expect(3);\n\n  let called1At = 0;\n  let called2At = 0;\n  let done = assert.async();\n\n  bb.later(() => called1At = Date.now(), 1);\n\n  // Block JS to simulate https://github.com/ebryn/backburner.js/issues/135\n  let waitUntil = Date.now() + 5;\n  while (Date.now() < waitUntil) { }\n\n  bb.later(() => called2At = Date.now(), 50);\n\n  setTimeout(() => {\n    assert.ok(called1At !== 0, 'timeout 1 was called');\n    assert.ok(called2At !== 0, 'timeout 2 was called');\n    assert.ok(called2At - called1At > 10, 'timeout 1 did not wait for timeout 2');\n    done();\n  }, 60);\n});\n\nQUnit.test('NaN timeout doesn\\'t hang other timeouts', function(assert) {\n  assert.expect(2);\n\n  let done = assert.async();\n  let called1At = 0;\n  let called2At = 0;\n\n  bb.later(() => called1At = Date.now(), 1);\n  bb.later(() => {}, NaN);\n  bb.later(() => called2At = Date.now(), 10);\n\n  setTimeout(() => {\n    assert.ok(called1At !== 0, 'timeout 1 was called');\n    assert.ok(called2At !== 0, 'timeout 2 was called');\n    done();\n  }, 20);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/throttle');\n\nQUnit.test('throttle', function(assert) {\n  assert.expect(18);\n\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let done = assert.async();\n\n  let wasCalled = false;\n  function throttler() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's throttle the function `throttler` for 40ms\n  // it will be executed in 40ms\n  bb.throttle(null, throttler, 40, false);\n  assert.equal(step++, 0);\n\n  // let's schedule `throttler` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 10);\n\n  // let's schedule `throttler` to run again in 20ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 20);\n\n  // let's schedule `throttler` to run yet again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 30);\n\n  // at 40ms, `throttler` will get called once\n\n  // now, let's schedule an assertion to occur at 50ms,\n  // 10ms after `throttler` has been called\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(wasCalled);\n  }, 50);\n\n  // great, we've made it this far, there's one more thing\n  // we need to test. we want to make sure we can call `throttle`\n  // again with the same target/method after it has executed\n  // at the 60ms mark, let's schedule another call to `throttle`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call throttle for the second time\n    bb.throttle(null, throttler, 100, false);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(wasCalled, 'Another throttle call with the same function can be executed later');\n    }, 110);\n  }, 60);\n\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 7);\n\n    // call throttle again that time using a string number like time interval\n    bb.throttle(null, throttler, '100', false);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 8);\n      assert.ok(wasCalled, 'Throttle accept a string number like time interval');\n      done();\n    }, 110);\n  }, 180);\n});\n\nQUnit.test('throttle with cancelTimers', function(assert) {\n  assert.expect(1);\n\n  let count = 0;\n  let bb = new Backburner(['zomg']);\n\n  // Throttle a no-op 10ms\n  bb.throttle(null, () => { /* no-op */ }, 10, false);\n\n  try {\n    bb.cancelTimers();\n  } catch (e) {\n    count++;\n  }\n\n  assert.equal(count, 0, 'calling cancelTimers while something is being throttled does not throw an error');\n});\n\nQUnit.test('throttle leading edge', function(assert) {\n  assert.expect(10);\n\n  let bb = new Backburner(['zerg']);\n  let throttle;\n  let throttle2;\n  let wasCalled = false;\n  let done = assert.async();\n\n  function throttler() {\n    assert.ok(!wasCalled, 'throttler hasn\\'t been called yet');\n    wasCalled = true;\n  }\n\n  // let's throttle the function `throttler` for 40ms\n  // it will be executed immediately, but throttled for the future hits\n  throttle = bb.throttle(null, throttler, 40);\n\n  assert.ok(wasCalled, 'function was executed immediately');\n\n  wasCalled = false;\n  // let's schedule `throttler` to run again, it shouldn't be allowed to queue for another 40 msec\n  throttle2 = bb.throttle(null, throttler, 40);\n\n  assert.equal(throttle, throttle2, 'No new throttle was inserted, returns old throttle');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'attempt to call throttle again didn\\'t happen');\n\n    throttle = bb.throttle(null, throttler, 40);\n    assert.ok(wasCalled, 'newly inserted throttle after timeout functioned');\n\n    assert.ok(bb.cancel(throttle), 'wait time of throttle was cancelled');\n\n    wasCalled = false;\n    throttle2 = bb.throttle(null, throttler, 40);\n    assert.notEqual(throttle, throttle2, 'the throttle is different');\n    assert.ok(wasCalled, 'throttle was inserted and run immediately after cancel');\n    done();\n  }, 60);\n});\n\nQUnit.test('throttle returns timer information usable for cancelling', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let wasCalled = false;\n\n  function throttler() {\n    assert.ok(false, 'this method shouldn\\'t be called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1, false);\n\n  assert.ok(bb.cancel(timer), 'the timer is cancelled');\n\n  // should return false second time around\n  assert.ok(!bb.cancel(timer), 'the timer no longer exists in the list');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'the timer wasn\\'t called after waiting');\n    done();\n  }, 60);\n});\n\nQUnit.test('throttler cancel after it\\'s executed returns false', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['darkknight']);\n  let done = assert.async();\n\n  let wasCalled = false;\n\n  function throttler() {\n    assert.ok(true, 'the throttled method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1);\n\n  setTimeout(() => {\n    assert.ok(!bb.cancel(timer), 'no timer existed to cancel');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n});\n\nQUnit.test('throttler returns the appropriate timer to cancel if the old item still exists', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['robin']);\n  let wasCalled = false;\n  let done = assert.async();\n\n  function throttler() {\n    assert.ok(true, 'the throttled method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1);\n  let timer2 = bb.throttle(null, throttler, 1);\n\n  assert.deepEqual(timer, timer2, 'the same timer was returned');\n\n  setTimeout(() => {\n    bb.throttle(null, throttler, 1);\n    assert.ok(!bb.cancel(timer), 'the second timer isn\\'t removed, despite appearing to be the same item');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.throttle(null, () => {\n    throw new Error('test error');\n  }, 20);\n});\n\nQUnit.test('throttle + immediate joins existing run loop instances', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(() => {\n    let parentInstance = bb.currentInstance;\n    bb.throttle(null, () => {\n     assert.equal(bb.currentInstance, parentInstance);\n    }, 20, true);\n  });\n});\n"],"names":["let","const","originalDateValueOf"],"mappings":"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"}